CREATE OR REPLACE FUNCTION "F_SPOSTA_DOCUMENTO" (A_ID_DOC NUMBER, A_AREA VARCHAR2) RETURN VARCHAR2 IS
/******************************************************************************
 NAME:  F_SPOSTA_DOCUMENTO
 PURPOSE: SCOPO DELLA FUNZIONE E QUELLO DI SPOSTARE UN DOCUMENTO DA UN AREA IN UN ALTRA:
   RETURN: STRINGA VUOTA SE IL MODELLO E' STATO SPOSTATO, ALTRIMENTI LA SEGNALAZIONE DI ERRORE
 REVISIONS:
 VER DATE AUTHOR DESCRIPTION
 --------- ---------- --------------- ------------------------------------
 1.0 07/09/2005 MARCO B 1. CREATED THIS FUNCTION.
 NOTES:
 AUTOMATICALLY AVAILABLE AUTO REPLACE KEYWORDS:
 OBJECT NAME:  F_SPOSTA_DOCUMENTO
 DATE AND TIME: 01/09/2005
 USERNAME: (SET IN TOAD OPTIONS, PROCEDURE EDITOR)
 TABLE NAME: (SET IN THE "NEW PL/SQL OBJECT" DIALOG)
******************************************************************************/
P_ESISTE       VARCHAR2(1) := '';
P_CODMOD      VARCHAR2(100) := '';
P_CODRIC      VARCHAR2(100) := '';
P_ID_NEW      NUMBER(10);
P_ID_OLD      NUMBER(10);
CURSOR C_1(C_ID_NEW NUMBER, C_IDDOC NUMBER) IS
   SELECT D1.ID_CAMPO ID_CAMPO_OLD, D2.ID_CAMPO ID_CAMPO_NEW
   FROM CAMPI_DOCUMENTO D1,
       CAMPI_DOCUMENTO D2,
       VALORI V
   WHERE D1.NOME = D2.NOME
    AND D2.ID_TIPODOC = C_ID_NEW
    AND V.ID_CAMPO = D1.ID_CAMPO
    AND V.ID_DOCUMENTO = C_IDDOC;
BEGIN
   -- RICAVO L'ID DEL TIPO DOCUMENTO DI PARTENZA, IL CODICE DEL MODELLO E IL CODICE DELLA RICHIESTA
   SELECT D.ID_TIPODOC, T.NOME, D.CODICE_RICHIESTA
    INTO P_ID_OLD, P_CODMOD, P_CODRIC
    FROM DOCUMENTI D,
        TIPI_DOCUMENTO T
    WHERE D.ID_DOCUMENTO = A_ID_DOC
    AND D.ID_TIPODOC = T.ID_TIPODOC;
   BEGIN
      -- RICAVO L'ID DEL TIPO DOCUMENTO DI ARRIVO
      SELECT ID_TIPODOC
       INTO P_ID_NEW
       FROM MODELLI
       WHERE AREA = A_AREA
       AND CODICE_MODELLO = P_CODMOD;
   EXCEPTION
    WHEN OTHERS THEN
    RETURN 'NELLA NUOVA AREA NON ESISTE UN MODELLO CON LO STESSO NOME!';
   END;
   BEGIN
      -- RICAVO L'ID DEL TIPO DOCUMENTO DI ARRIVO
      SELECT '1'
       INTO P_ESISTE
       FROM DOCUMENTI
       WHERE ID_TIPODOC = P_ID_NEW
       AND CODICE_RICHIESTA = P_CODRIC;
   EXCEPTION
    WHEN NO_DATA_FOUND THEN
          P_ESISTE := '0';
    WHEN OTHERS THEN
    RETURN 'NELLA NUOVA AREA ESISTE UN DOCUMENTO CON LO STESSO CODICE RICHIESTA!';
   END;
   IF P_ESISTE = '1' THEN
    RETURN 'NELLA NUOVA AREA ESISTE UN DOCUMENTO CON LO STESSO CODICE RICHIESTA!';
   END IF;
   BEGIN
      -- CONTROLLO L'ESISTENZA DI VALORI I CUI CAMPI NON SONO PRESENTI NEL NUOVO DOCUMENTO
      SELECT '1'
       INTO P_ESISTE
 FROM CAMPI_DOCUMENTO D,
           VALORI V,
 DATI_MODELLO DM
       WHERE V.ID_CAMPO = D.ID_CAMPO
       AND V.ID_DOCUMENTO = A_ID_DOC
       AND NOME NOT IN
       (SELECT NOME
 FROM CAMPI_DOCUMENTO
       WHERE ID_TIPODOC = P_ID_NEW
 )
 AND DM.ID_CAMPO=D.ID_CAMPO AND DM.IN_USO ='S';
   EXCEPTION
    WHEN NO_DATA_FOUND THEN
          P_ESISTE := '0';
    WHEN OTHERS THEN
    RETURN 'ESISTONO VALORI NON PRESENTI NEL NUOVO DOCUMENTO!';
   END;
   IF P_ESISTE = '1' THEN
    RETURN 'ESISTONO VALORI NON PRESENTI NEL NUOVO DOCUMENTO!';
   END IF;
 --CONTROLLO IL CODICE RICHIESTA
 DECLARE
 A_RET NUMBER(1):=0;
 BEGIN
 SELECT 1
 INTO A_RET
 FROM RICHIESTE
 WHERE AREA=A_AREA
 AND CODICE_RICHIESTA=P_CODRIC;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 INSERT INTO RICHIESTE
 (CODICE_RICHIESTA,AREA,DATA_INSERIMENTO)
 VALUES
 (P_CODRIC,A_AREA,SYSDATE);
 END;
   -- AGGIORNO L'ID_TIPODOC NEL DOCUMENTO
   UPDATE DOCUMENTI
    SET ID_TIPODOC = P_ID_NEW,
       AREA = A_AREA
    WHERE ID_DOCUMENTO = A_ID_DOC;
    FOR C1 IN C_1(P_ID_NEW , A_ID_DOC ) LOOP
      UPDATE VALORI
       SET ID_CAMPO = C1.ID_CAMPO_NEW
       WHERE ID_DOCUMENTO = A_ID_DOC
       AND ID_CAMPO = C1.ID_CAMPO_OLD;
   END LOOP;
   RETURN '';
END F_SPOSTA_DOCUMENTO;
/

